% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dispersal.R
\name{spread3}
\alias{spread3}
\title{An alternative spread function -- conceived for insects}
\usage{
spread3(start, rasQuality, rasAbundance, advectionDir, advectionMag,
  kernel, meanDist, plot.it = TRUE, minNumAgents = 50)
}
\arguments{
\item{start}{Raster indices from which to initiate dispersal}

\item{rasQuality}{A raster with habitat quality. Currently, must
be scaled from 0 to 1, i.e., a probability of "settling"}

\item{rasAbundance}{A raster where each pixel represents the number
of "agents" or pseudo-agents contained. This number of agents, will
be spread horizontally, and distributed from each pixel
that contains a non-zero non NA value.}

\item{advectionDir}{A single number in degrees from North = 0, indicating
the direction of advective forcing (i.e., wind). Will soon allow a
raster of advection vectors.}

\item{advectionMag}{A single number in distance units of the \code{rasQuality},
e.g., meters, indicating the relative forcing that will occur for
each 1 pixel of attempted spreading.}

\item{meanDist}{A single number indicating the mean distance parameter
for a negative exponential distribution dispersal kernel (e.g., \code{dexp}).}

\item{plot.it}{Logical. If \code{TRUE}, there will be 2 plots that occur
as iterations happen.}

\item{minNumAgents}{Single numeric indicating the minimum number of agents
to consider all dispersing finished. Default is 50}
}
\description{
This is built with \code{\link[SpaDES.tools]{spread2}} and
is still experimental. This one differs from other attempts
in that it treats the advection and dispersal as mathematical
vectors that are added together. They are "rounded" to pixel
centres.
}
\examples{

library(raster)
library(sf)
library(quickPlot)
#a <- randomStudyArea(size = 1e8)
maxDim <- 10000
ras <- raster::raster(extent(c(0, maxDim, 0, maxDim)), res = 100, vals = 0)
rasQuality <- raster(ras)
rasQuality[] <- 1
#ras <- raster::raster(extent(a), res = 100)
#mask <- fasterize::fasterize(st_as_sf(a), ras)
#rasQuality <- gaussMap(ras)
#crs(rasQuality) <- crs(a)
#rasQuality[is.na(mask)] <- NA
# rescale so min is 0.75 and max is 1
#rasQuality[] <- rasQuality[] / (maxValue(rasQuality * 4) ) + 3/4
#rasQuality[] <- 1
rasAbundance <- raster(rasQuality)
rasAbundance[] <- 0
startPixel <- middlePixel(rasAbundance)
startPixel <- sample(seq(ncell(rasAbundance)), 3)
rasAbundance[startPixel] <- 1000
advectionDir <- 90
advectionMag <- 4 * res(rasAbundance)[1]

clearPlot()
spread3(rasAbundance = rasAbundance,
        rasQuality = rasQuality,
        advectionDir = advectionDir,
        advectionMag = advectionMag,
        meanDist = 600)


}
